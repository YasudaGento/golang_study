// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/notification.proto

package sample

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type PereodicHelloRequest struct {
	FirstName            string   `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string   `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PereodicHelloRequest) Reset()         { *m = PereodicHelloRequest{} }
func (m *PereodicHelloRequest) String() string { return proto.CompactTextString(m) }
func (*PereodicHelloRequest) ProtoMessage()    {}
func (*PereodicHelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_beb4fc010f5c4b1c, []int{0}
}

func (m *PereodicHelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PereodicHelloRequest.Unmarshal(m, b)
}
func (m *PereodicHelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PereodicHelloRequest.Marshal(b, m, deterministic)
}
func (m *PereodicHelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PereodicHelloRequest.Merge(m, src)
}
func (m *PereodicHelloRequest) XXX_Size() int {
	return xxx_messageInfo_PereodicHelloRequest.Size(m)
}
func (m *PereodicHelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PereodicHelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PereodicHelloRequest proto.InternalMessageInfo

func (m *PereodicHelloRequest) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *PereodicHelloRequest) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

// The response message containing the greetings
type PeriodicHelloReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeriodicHelloReply) Reset()         { *m = PeriodicHelloReply{} }
func (m *PeriodicHelloReply) String() string { return proto.CompactTextString(m) }
func (*PeriodicHelloReply) ProtoMessage()    {}
func (*PeriodicHelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_beb4fc010f5c4b1c, []int{1}
}

func (m *PeriodicHelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeriodicHelloReply.Unmarshal(m, b)
}
func (m *PeriodicHelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeriodicHelloReply.Marshal(b, m, deterministic)
}
func (m *PeriodicHelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodicHelloReply.Merge(m, src)
}
func (m *PeriodicHelloReply) XXX_Size() int {
	return xxx_messageInfo_PeriodicHelloReply.Size(m)
}
func (m *PeriodicHelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodicHelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodicHelloReply proto.InternalMessageInfo

func (m *PeriodicHelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*PereodicHelloRequest)(nil), "sample.PereodicHelloRequest")
	proto.RegisterType((*PeriodicHelloReply)(nil), "sample.PeriodicHelloReply")
}

func init() {
	proto.RegisterFile("proto/notification.proto", fileDescriptor_beb4fc010f5c4b1c)
}

var fileDescriptor_beb4fc010f5c4b1c = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x8f, 0xb1, 0xca, 0xc2, 0x30,
	0x14, 0x46, 0xff, 0xfe, 0x43, 0x6d, 0x2f, 0xb8, 0x5c, 0x1c, 0x4a, 0x55, 0x90, 0x4e, 0x4e, 0x51,
	0xf4, 0x25, 0x5c, 0x2c, 0xa5, 0x9b, 0x93, 0xc4, 0x7a, 0x2b, 0x81, 0xa4, 0xa9, 0x49, 0x1c, 0x7c,
	0x7b, 0x69, 0x24, 0x50, 0xc5, 0x31, 0xe7, 0xc0, 0x97, 0x73, 0x21, 0xeb, 0x8d, 0x76, 0x7a, 0xd3,
	0x69, 0x27, 0x5a, 0xd1, 0x70, 0x27, 0x74, 0xc7, 0x3c, 0xc2, 0xd8, 0x72, 0xd5, 0x4b, 0x2a, 0x6a,
	0x98, 0x55, 0x64, 0x48, 0x5f, 0x45, 0x73, 0x20, 0x29, 0x75, 0x4d, 0xf7, 0x07, 0x59, 0x87, 0x4b,
	0x80, 0x56, 0x18, 0xeb, 0xce, 0x1d, 0x57, 0x94, 0x45, 0xab, 0x68, 0x9d, 0xd6, 0xa9, 0x27, 0x25,
	0x57, 0x84, 0x73, 0x48, 0x25, 0x0f, 0xf6, 0xdf, 0xdb, 0x64, 0x00, 0x83, 0x2c, 0x18, 0x60, 0x45,
	0x46, 0x8c, 0x36, 0x7b, 0xf9, 0xc4, 0x0c, 0x26, 0x8a, 0xac, 0xe5, 0xb7, 0x30, 0x17, 0x9e, 0xbb,
	0x13, 0x24, 0xa5, 0x2f, 0x24, 0x83, 0x47, 0x98, 0x7e, 0xf4, 0xe0, 0x82, 0xbd, 0x4b, 0xd9, 0xaf,
	0xcc, 0x3c, 0x1f, 0xd9, 0xaf, 0x0f, 0x8b, 0xbf, 0x6d, 0x74, 0x89, 0xfd, 0xb5, 0xfb, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xf1, 0x3c, 0xde, 0x5f, 0x09, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NotifierClient is the client API for Notifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotifierClient interface {
	// Sends a greeting
	PereodicHello(ctx context.Context, in *PereodicHelloRequest, opts ...grpc.CallOption) (Notifier_PereodicHelloClient, error)
}

type notifierClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifierClient(cc grpc.ClientConnInterface) NotifierClient {
	return &notifierClient{cc}
}

func (c *notifierClient) PereodicHello(ctx context.Context, in *PereodicHelloRequest, opts ...grpc.CallOption) (Notifier_PereodicHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Notifier_serviceDesc.Streams[0], "/sample.Notifier/PereodicHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &notifierPereodicHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notifier_PereodicHelloClient interface {
	Recv() (*PeriodicHelloReply, error)
	grpc.ClientStream
}

type notifierPereodicHelloClient struct {
	grpc.ClientStream
}

func (x *notifierPereodicHelloClient) Recv() (*PeriodicHelloReply, error) {
	m := new(PeriodicHelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NotifierServer is the server API for Notifier service.
type NotifierServer interface {
	// Sends a greeting
	PereodicHello(*PereodicHelloRequest, Notifier_PereodicHelloServer) error
}

// UnimplementedNotifierServer can be embedded to have forward compatible implementations.
type UnimplementedNotifierServer struct {
}

func (*UnimplementedNotifierServer) PereodicHello(req *PereodicHelloRequest, srv Notifier_PereodicHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method PereodicHello not implemented")
}

func RegisterNotifierServer(s *grpc.Server, srv NotifierServer) {
	s.RegisterService(&_Notifier_serviceDesc, srv)
}

func _Notifier_PereodicHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PereodicHelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotifierServer).PereodicHello(m, &notifierPereodicHelloServer{stream})
}

type Notifier_PereodicHelloServer interface {
	Send(*PeriodicHelloReply) error
	grpc.ServerStream
}

type notifierPereodicHelloServer struct {
	grpc.ServerStream
}

func (x *notifierPereodicHelloServer) Send(m *PeriodicHelloReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Notifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sample.Notifier",
	HandlerType: (*NotifierServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PereodicHello",
			Handler:       _Notifier_PereodicHello_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/notification.proto",
}
